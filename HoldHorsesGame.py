import numpy as np
from Game import Game
from HoldHorsesLogic import Board
import hashlib
import sys

boardWidth = 7
boardHeight = 6

class HoldHorsesGame(Game):
    def __init__(self, height=boardHeight, width=boardWidth, np_pieces=None):
        Game.__init__(self)
        self._base_board = Board(height, width, np_pieces)
        self._possible_moves = [(0, 0, 2, 1), (0, 0, 1, 2), (0, 1, 2, 0), (0, 1, 2, 2), (0, 1, 1, 3), (0, 2, 1, 0), (0, 2, 2, 1), (0, 2, 2, 3), (0, 2, 1, 4), (0, 3, 1, 1), (0, 3, 2, 2), (0, 3, 2, 4), (0, 3, 1, 5), (0, 4, 1, 2), (0, 4, 2, 3), (0, 4, 2, 5), (0, 5, 1, 3), (0, 5, 2, 4), (1, 0, 3, 1), (1, 0, 2, 2), (1, 0, 0, 2), (1, 1, 3, 0), (1, 1, 3, 2), (1, 1, 2, 3), (1, 1, 0, 3), (1, 2, 2, 0), (1, 2, 3, 1), (1, 2, 3, 3), (1, 2, 2, 4), (1, 2, 0, 4), (1, 2, 0, 0), (1, 3, 2, 1), (1, 3, 3, 2), (1, 3, 3, 4), (1, 3, 2, 5), (1, 3, 0, 5), (1, 3, 0, 1), (1, 4, 2, 2), (1, 4, 3, 3), (1, 4, 3, 5), (1, 4, 0, 2), (1, 5, 2, 3), (1, 5, 3, 4), (1, 5, 0, 3), (2, 0, 4, 1), (2, 0, 3, 2), (2, 0, 1, 2), (2, 0, 0, 1), (2, 1, 4, 0), (2, 1, 4, 2), (2, 1, 3, 3), (2, 1, 1, 3), (2, 1, 0, 2), (2, 1, 0, 0), (2, 2, 3, 0), (2, 2, 4, 1), (2, 2, 4, 3), (2, 2, 3, 4), (2, 2, 1, 4), (2, 2, 0, 3), (2, 2, 0, 1), (2, 2, 1, 0), (2, 3, 3, 1), (2, 3, 4, 2), (2, 3, 4, 4), (2, 3, 3, 5), (2, 3, 1, 5), (2, 3, 0, 4), (2, 3, 0, 2), (2, 3, 1, 1), (2, 4, 3, 2), (2, 4, 4, 3), (2, 4, 4, 5), (2, 4, 0, 5), (2, 4, 0, 3), (2, 4, 1, 2), (2, 5, 3, 3), (2, 5, 4, 4), (2, 5, 0, 4), (2, 5, 1, 3), (3, 0, 5, 1), (3, 0, 4, 2), (3, 0, 2, 2), (3, 0, 1, 1), (3, 1, 5, 0), (3, 1, 5, 2), (3, 1, 4, 3), (3, 1, 2, 3), (3, 1, 1, 2), (3, 1, 1, 0), (3, 2, 4, 0), (3, 2, 5, 1), (3, 2, 5, 3), (3, 2, 4, 4), (3, 2, 2, 4), (3, 2, 1, 3), (3, 2, 1, 1), (3, 2, 2, 0), (3, 3, 4, 1), (3, 3, 5, 2), (3, 3, 5, 4), (3, 3, 4, 5), (3, 3, 2, 5), (3, 3, 1, 4), (3, 3, 1, 2), (3, 3, 2, 1), (3, 4, 4, 2), (3, 4, 5, 3), (3, 4, 5, 5), (3, 4, 1, 5), (3, 4, 1, 3), (3, 4, 2, 2), (3, 5, 4, 3), (3, 5, 5, 4), (3, 5, 1, 4), (3, 5, 2, 3), (4, 0, 6, 1), (4, 0, 5, 2), (4, 0, 3, 2), (4, 0, 2, 1), (4, 1, 6, 0), (4, 1, 6, 2), (4, 1, 5, 3), (4, 1, 3, 3), (4, 1, 2, 2), (4, 1, 2, 0), (4, 2, 5, 0), (4, 2, 6, 1), (4, 2, 6, 3), (4, 2, 5, 4), (4, 2, 3, 4), (4, 2, 2, 3), (4, 2, 2, 1), (4, 2, 3, 0), (4, 3, 5, 1), (4, 3, 6, 2), (4, 3, 6, 4), (4, 3, 5, 5), (4, 3, 3, 5), (4, 3, 2, 4), (4, 3, 2, 2), (4, 3, 3, 1), (4, 4, 5, 2), (4, 4, 6, 3), (4, 4, 6, 5), (4, 4, 2, 5), (4, 4, 2, 3), (4, 4, 3, 2), (4, 5, 5, 3), (4, 5, 6, 4), (4, 5, 2, 4), (4, 5, 3, 3), (5, 0, 6, 2), (5, 0, 4, 2), (5, 0, 3, 1), (5, 1, 6, 3), (5, 1, 4, 3), (5, 1, 3, 2), (5, 1, 3, 0), (5, 2, 6, 0), (5, 2, 6, 4), (5, 2, 4, 4), (5, 2, 3, 3), (5, 2, 3, 1), (5, 2, 4, 0), (5, 3, 6, 1), (5, 3, 6, 5), (5, 3, 4, 5), (5, 3, 3, 4), (5, 3, 3, 2), (5, 3, 4, 1), (5, 4, 6, 2), (5, 4, 3, 5), (5, 4, 3, 3), (5, 4, 4, 2), (5, 5, 6, 3), (5, 5, 3, 4), (5, 5, 4, 3), (6, 0, 5, 2), (6, 0, 4, 1), (6, 1, 5, 3), (6, 1, 4, 2), (6, 1, 4, 0), (6, 2, 5, 4), (6, 2, 4, 3), (6, 2, 4, 1), (6, 2, 5, 0), (6, 3, 5, 5), (6, 3, 4, 4), (6, 3, 4, 2), (6, 3, 5, 1), (6, 4, 4, 5), (6, 4, 4, 3), (6, 4, 5, 2), (6, 5, 4, 4), (6, 5, 5, 3)]
        self._possible_moves_str = ['(0, 0, 2, 1)', '(0, 0, 1, 2)', '(0, 1, 2, 0)', '(0, 1, 2, 2)', '(0, 1, 1, 3)', '(0, 2, 1, 0)', '(0, 2, 2, 1)', '(0, 2, 2, 3)', '(0, 2, 1, 4)', '(0, 3, 1, 1)', '(0, 3, 2, 2)', '(0, 3, 2, 4)', '(0, 3, 1, 5)', '(0, 4, 1, 2)', '(0, 4, 2, 3)', '(0, 4, 2, 5)', '(0, 5, 1, 3)', '(0, 5, 2, 4)', '(1, 0, 3, 1)', '(1, 0, 2, 2)', '(1, 0, 0, 2)', '(1, 1, 3, 0)', '(1, 1, 3, 2)', '(1, 1, 2, 3)', '(1, 1, 0, 3)', '(1, 2, 2, 0)', '(1, 2, 3, 1)', '(1, 2, 3, 3)', '(1, 2, 2, 4)', '(1, 2, 0, 4)', '(1, 2, 0, 0)', '(1, 3, 2, 1)', '(1, 3, 3, 2)', '(1, 3, 3, 4)', '(1, 3, 2, 5)', '(1, 3, 0, 5)', '(1, 3, 0, 1)', '(1, 4, 2, 2)', '(1, 4, 3, 3)', '(1, 4, 3, 5)', '(1, 4, 0, 2)', '(1, 5, 2, 3)', '(1, 5, 3, 4)', '(1, 5, 0, 3)', '(2, 0, 4, 1)', '(2, 0, 3, 2)', '(2, 0, 1, 2)', '(2, 0, 0, 1)', '(2, 1, 4, 0)', '(2, 1, 4, 2)', '(2, 1, 3, 3)', '(2, 1, 1, 3)', '(2, 1, 0, 2)', '(2, 1, 0, 0)', '(2, 2, 3, 0)', '(2, 2, 4, 1)', '(2, 2, 4, 3)', '(2, 2, 3, 4)', '(2, 2, 1, 4)', '(2, 2, 0, 3)', '(2, 2, 0, 1)', '(2, 2, 1, 0)', '(2, 3, 3, 1)', '(2, 3, 4, 2)', '(2, 3, 4, 4)', '(2, 3, 3, 5)', '(2, 3, 1, 5)', '(2, 3, 0, 4)', '(2, 3, 0, 2)', '(2, 3, 1, 1)', '(2, 4, 3, 2)', '(2, 4, 4, 3)', '(2, 4, 4, 5)', '(2, 4, 0, 5)', '(2, 4, 0, 3)', '(2, 4, 1, 2)', '(2, 5, 3, 3)', '(2, 5, 4, 4)', '(2, 5, 0, 4)', '(2, 5, 1, 3)', '(3, 0, 5, 1)', '(3, 0, 4, 2)', '(3, 0, 2, 2)', '(3, 0, 1, 1)', '(3, 1, 5, 0)', '(3, 1, 5, 2)', '(3, 1, 4, 3)', '(3, 1, 2, 3)', '(3, 1, 1, 2)', '(3, 1, 1, 0)', '(3, 2, 4, 0)', '(3, 2, 5, 1)', '(3, 2, 5, 3)', '(3, 2, 4, 4)', '(3, 2, 2, 4)', '(3, 2, 1, 3)', '(3, 2, 1, 1)', '(3, 2, 2, 0)', '(3, 3, 4, 1)', '(3, 3, 5, 2)', '(3, 3, 5, 4)', '(3, 3, 4, 5)', '(3, 3, 2, 5)', '(3, 3, 1, 4)', '(3, 3, 1, 2)', '(3, 3, 2, 1)', '(3, 4, 4, 2)', '(3, 4, 5, 3)', '(3, 4, 5, 5)', '(3, 4, 1, 5)', '(3, 4, 1, 3)', '(3, 4, 2, 2)', '(3, 5, 4, 3)', '(3, 5, 5, 4)', '(3, 5, 1, 4)', '(3, 5, 2, 3)', '(4, 0, 6, 1)', '(4, 0, 5, 2)', '(4, 0, 3, 2)', '(4, 0, 2, 1)', '(4, 1, 6, 0)', '(4, 1, 6, 2)', '(4, 1, 5, 3)', '(4, 1, 3, 3)', '(4, 1, 2, 2)', '(4, 1, 2, 0)', '(4, 2, 5, 0)', '(4, 2, 6, 1)', '(4, 2, 6, 3)', '(4, 2, 5, 4)', '(4, 2, 3, 4)', '(4, 2, 2, 3)', '(4, 2, 2, 1)', '(4, 2, 3, 0)', '(4, 3, 5, 1)', '(4, 3, 6, 2)', '(4, 3, 6, 4)', '(4, 3, 5, 5)', '(4, 3, 3, 5)', '(4, 3, 2, 4)', '(4, 3, 2, 2)', '(4, 3, 3, 1)', '(4, 4, 5, 2)', '(4, 4, 6, 3)', '(4, 4, 6, 5)', '(4, 4, 2, 5)', '(4, 4, 2, 3)', '(4, 4, 3, 2)', '(4, 5, 5, 3)', '(4, 5, 6, 4)', '(4, 5, 2, 4)', '(4, 5, 3, 3)', '(5, 0, 6, 2)', '(5, 0, 4, 2)', '(5, 0, 3, 1)', '(5, 1, 6, 3)', '(5, 1, 4, 3)', '(5, 1, 3, 2)', '(5, 1, 3, 0)', '(5, 2, 6, 0)', '(5, 2, 6, 4)', '(5, 2, 4, 4)', '(5, 2, 3, 3)', '(5, 2, 3, 1)', '(5, 2, 4, 0)', '(5, 3, 6, 1)', '(5, 3, 6, 5)', '(5, 3, 4, 5)', '(5, 3, 3, 4)', '(5, 3, 3, 2)', '(5, 3, 4, 1)', '(5, 4, 6, 2)', '(5, 4, 3, 5)', '(5, 4, 3, 3)', '(5, 4, 4, 2)', '(5, 5, 6, 3)', '(5, 5, 3, 4)', '(5, 5, 4, 3)', '(6, 0, 5, 2)', '(6, 0, 4, 1)', '(6, 1, 5, 3)', '(6, 1, 4, 2)', '(6, 1, 4, 0)', '(6, 2, 5, 4)', '(6, 2, 4, 3)', '(6, 2, 4, 1)', '(6, 2, 5, 0)', '(6, 3, 5, 5)', '(6, 3, 4, 4)', '(6, 3, 4, 2)', '(6, 3, 5, 1)', '(6, 4, 4, 5)', '(6, 4, 4, 3)', '(6, 4, 5, 2)', '(6, 5, 4, 4)', '(6, 5, 5, 3)']

    def getInitBoard(self):
        sys.setrecursionlimit(3000)
        return Board(boardHeight, boardWidth)

    def getBoardSize(self):
        return (self._base_board.width, self._base_board.height)

    def getGameEnded(self, board, player):
        r = board.get_result()
        # if r:
        #     print()
        #     print("Result: %s" % r)
        #     print(board.np_pieces)
        #     print("result board ^")
        #     print()
        return r or 0

    def getNextState(self, board, player, action):
        b = Board(self._base_board.height, self._base_board.width, np.copy(board.np_pieces),moves_rem=board.moves_remaining)
        move = self._possible_moves[action]
        valids = self.getValidMoves(self.getCanonicalForm(b, player), 1)
        assert valids[action] > 0
        # print()
        # print("The board is: ")
        # print(b.np_pieces)
        # print("The move is:", move)
        # print("Player turn is: ", player)
        # print("from piece is: ", b.np_pieces[move[0], move[1]])
        # print("to piece is: ", b.np_pieces[move[2], move[3]])
        # print()
        # if valids[action] == 0:
        #     print("The invalid move is:", move)
        #     print("Player turn is: ", player)
        #     print("from piece is: ", b.np_pieces[move[0], move[1]])
        #     print("to piece is: ", b.np_pieces[move[2], move[3]])
        #     print(board.np_pieces)

            #

        b.make_move(move, player)
        # print("The new board is: ")
        # print(b.np_pieces)
        # input()
        b.moves_remaining = board.moves_remaining - 1
        return (b, -player)

    def getValidMoves(self, board, player):
        b = Board(self._base_board.height, self._base_board.width, np.copy(board.np_pieces), moves_rem=board.moves_remaining)
        if not b.has_legal_moves(player):
            valids = [0.0] * self.getActionSize()
            valids[-1] = 1
            return np.array(valids)
        legal_moves = [str(x) for x in b.get_legal_moves(player)]
        valid_moves = np.isin(np.array(self._possible_moves_str), legal_moves).astype(int)
        assert np.sum(valid_moves) == len(legal_moves)
        return valid_moves

    def getActionSize(self):
        return 196

    def getCanonicalForm(self, board, player):
        b = Board(self._base_board.height, self._base_board.width, np.copy(board.np_pieces), moves_rem=board.moves_remaining)
        if player == 1:
            return b
        else:
            b.np_pieces = board.np_pieces * player
            return b

    def getSymmetries(self, board, pi):
        return [(board, pi)]

    def stringRepresentation(self, board):
        # return hashlib.md5(np.array_str(board.np_pieces).encode("utf-8")).hexdigest()
        # board_str = board.np_pieces.tostring()
        # hash = hashlib.md5(board_str).hexdigest()
        return hashlib.md5(board.np_pieces.tostring()).hexdigest()


    @staticmethod
    def display(board):
        #print("display")
        print()
        print("Display")
        print(board.np_pieces)

